# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: win
  pool:
    vmImage: windows-2019
  strategy:
    matrix:
      win_64_:
        CONFIG: win_64_
        UPLOAD_PACKAGES: 'True'
        SHORT_CONFIG: win_64_
  timeoutInMinutes: 360
  variables:
    CONDA_BLD_PATH: D:\\bld\\

  steps:
    - script: |
        choco install vcpython27 -fdv -y --debug
      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Install vcpython27.msi (if needed)

    # Cygwin's git breaks conda-build. (See https://github.com/conda-forge/conda-smithy-feedstock/pull/2.)
    # - script: rmdir C:\cygwin /s /q
    #   continueOnError: true

    - powershell: |
        Set-PSDebug -Trace 1

        $batchcontent = @"
        ECHO ON
        SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

        DIR "%vcpython%"

        CALL "%vcpython%\vcvarsall.bat" %*
        "@

        $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
        $batchPath = "$batchDir" + "\vcvarsall.bat"
        New-Item -Path $batchPath -ItemType "file" -Force

        Set-Content -Value $batchcontent -Path $batchPath

        Get-ChildItem -Path $batchDir

        Get-ChildItem -Path ($batchDir + '\..')

      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Patch vs2008 (if needed)

    - task: CondaEnvironment@1
      inputs:
        packageSpecs: 'python=3.6 conda-build conda "conda-forge-ci-setup=3" pip' # Optional
        installOptions: "-c conda-forge"
        updateConda: true
      displayName: Install conda-build and activate environment

    - script: set PYTHONUNBUFFERED=1
      displayName: Set PYTHONUNBUFFERED

    # Configure the VM
    - script: |
        call activate base
        setup_conda_rc .\ ".\recipe" .\.ci_support\%CONFIG%.yaml
      displayName: conda-forge CI setup

    # Configure the VM.
    - script: |
        set "CI=azure"
        call activate base
        run_conda_forge_build_setup
      displayName: conda-forge build setup
    

    # Special cased version setting some more things!
    - script: |
        call activate base
        conda.exe build "recipe" -m .ci_support\%CONFIG%.yaml
      displayName: Build recipe (vs2008)
      env:
        VS90COMNTOOLS: "C:\\Program Files (x86)\\Common Files\\Microsoft\\Visual C++ for Python\\9.0\\VC\\bin"
        PYTHONUNBUFFERED: 1
      condition: contains(variables['CONFIG'], 'vs2008')

    - script: |
        call activate base
        conda.exe build "recipe" -m .ci_support\%CONFIG%.yaml
      displayName: Build recipe
      env:
        PYTHONUNBUFFERED: 1
      condition: not(contains(variables['CONFIG'], 'vs2008'))
    - script: |
        setlocal EnableDelayedExpansion

        set ARTIFACT_UNIQUE_ID=$(build.BuildNumber).$(system.JobAttempt)_$(CONFIG)
        if not "%ARTIFACT_UNIQUE_ID%" == "%ARTIFACT_UNIQUE_ID:~0,80%" (
          set ARTIFACT_UNIQUE_ID=$(build.BuildNumber).$(system.JobAttempt)_$(SHORT_CONFIG)
        )
        set BLD_ARTIFACT_PREFIX=conda_artifacts
        set BLD_ARTIFACT_NAME=%BLD_ARTIFACT_PREFIX%_%ARTIFACT_UNIQUE_ID%
        echo ##vso[task.setVariable variable=BLD_ARTIFACT_NAME]%BLD_ARTIFACT_NAME%
        echo BLD_ARTIFACT_NAME: %BLD_ARTIFACT_NAME%

        set BLD_ARTIFACT_DIR=$(CONDA_BLD_PATH)
        if exist %BLD_ARTIFACT_DIR% (
          if exist %BLD_ARTIFACT_DIR%\\git_cache ( rmdir /s /q %BLD_ARTIFACT_DIR%\\git_cache )
          if exist %BLD_ARTIFACT_DIR%\\pip_cache ( rmdir /s /q %BLD_ARTIFACT_DIR%\\pip_cache )
          if exist %BLD_ARTIFACT_DIR%\\src_cache ( rmdir /s /q %BLD_ARTIFACT_DIR%\\src_cache )
        ) else (
          echo ##vso[task.logissue type=error]conda-build directory does not exist
          exit 1
        )
        echo ##vso[task.setVariable variable=BLD_ARTIFACT_PATH]%BLD_ARTIFACT_DIR%
        echo BLD_ARTIFACT_DIR: %BLD_ARTIFACT_DIR%

        if "%AGENT_JOBSTATUS%" == "Failed" (
          set BLD_ARTIFACT_ZIP=$(Build.ArtifactStagingDirectory)\%BLD_ARTIFACT_NAME%.zip
          7z a "!BLD_ARTIFACT_ZIP!" "%BLD_ARTIFACT_DIR%" -xr^^!.git/ -xr^^!_*_env*/ -xr^^!*_cache/
          echo ##vso[task.setVariable variable=BLD_ARTIFACT_PATH]!BLD_ARTIFACT_ZIP!
          echo BLD_ARTIFACT_ZIP: !BLD_ARTIFACT_ZIP!

          set ENV_ARTIFACT_PREFIX=conda_envs
          set ENV_ARTIFACT_NAME=!ENV_ARTIFACT_PREFIX!_%ARTIFACT_UNIQUE_ID%
          echo ##vso[task.setVariable variable=ENV_ARTIFACT_NAME]!ENV_ARTIFACT_NAME!
          echo ENV_ARTIFACT_NAME: !ENV_ARTIFACT_NAME!
          set ENV_ARTIFACT_ZIP=$(Build.ArtifactStagingDirectory)\!ENV_ARTIFACT_NAME!.zip
          7z a "!ENV_ARTIFACT_ZIP!" -r "%BLD_ARTIFACT_DIR%"/_*_env*/
          echo ##vso[task.setVariable variable=ENV_ARTIFACT_PATH]!ENV_ARTIFACT_ZIP!
          echo ENV_ARTIFACT_ZIP: !ENV_ARTIFACT_ZIP!
        )
      displayName: Prepare conda build artifacts
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Store conda build artifacts
      condition: not(eq(variables.BLD_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(BLD_ARTIFACT_PATH)
        artifactName: $(BLD_ARTIFACT_NAME)

    - task: PublishPipelineArtifact@1
      displayName: Store conda build environment artifacts
      condition: not(eq(variables.ENV_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(ENV_ARTIFACT_PATH)
        artifactName: $(ENV_ARTIFACT_NAME)
    - script: |
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        validate_recipe_outputs "%FEEDSTOCK_NAME%"
      displayName: Validate Recipe Outputs

    - script: |
        set "GIT_BRANCH=%BUILD_SOURCEBRANCHNAME%"
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        upload_package --validate --feedstock-name="%FEEDSTOCK_NAME%" .\ ".\recipe" .ci_support\%CONFIG%.yaml
      displayName: Upload package
      env:
        BINSTAR_TOKEN: $(BINSTAR_TOKEN)
        FEEDSTOCK_TOKEN: $(FEEDSTOCK_TOKEN)
        STAGING_BINSTAR_TOKEN: $(STAGING_BINSTAR_TOKEN)
      condition: and(succeeded(), not(eq(variables['UPLOAD_PACKAGES'], 'False')))