{% set volk_lib = "volk" %}
{% set name = "volk" %}
{% set version = "2.4.0" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/gnuradio/{{ name }}/releases/download/v{{ version }}/{{ name }}-{{ version }}.tar.gz
  sha256: e63e7bd017b41ca548606eaf223a3e9c7b7b8fcad4ca97f099d7ddbab8019c15

build:
  number: 0
  run_exports:
    - {{ pin_subpackage('volk', max_pin='x.x') }}
  skip: true  # [py2k]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake >=3.8
    - jom  # [win]
    - pkg-config  # [not win]

  host:
    - boost-cpp  # [not linux]
    - mako >=0.4.2
    - python

  run:
    - boost-cpp  # [not linux]
    - python

test:
  commands:
    # verify CLI tools
    {% set volk_cmds = ["volk-config-info", "volk_profile"] %}
    {% set volk_python_cmds = ["volk_modtool"] %}  # [unix]
    {% set volk_python_cmds = ["volk_modtool.py"] %}  # [win]
    {% for each_cmd in volk_cmds + volk_python_cmds %}
    - command -v {{ each_cmd }}  # [unix]
    - where {{ each_cmd }}  # [win]
    {% endfor %}

    # verify libraries
    {% set volk_lib = "volk" %}
    - test -f $PREFIX/lib/lib{{ volk_lib }}${SHLIB_EXT}  # [unix]
    - if not exist %PREFIX%\\Library\\bin\\{{ volk_lib }}.dll exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\{{ volk_lib }}.lib exit 1  # [win]

    # run selection of commands
    - volk-config-info --version --prefix --cc --cflags --all-machines --avail-machines --machine --alignment --malloc

  imports:
    - volk_modtool

about:
  home: https://github.com/gnuradio/volk
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: The Vector Optimized Library of Kernels
  description: |
    VOLK is the Vector-Optimized Library of Kernels. It is a free library,
    currently offered under the GPLv3, that contains kernels of hand-written
    SIMD code for different mathematical operations. Since each SIMD
    architecture can be very different and no compiler has yet come along to
    handle vectorization properly or highly efficiently, VOLK approaches the
    problem differently.

    For each architecture or platform that a developer wishes to vectorize for,
    a new proto-kernel is added to VOLK. At runtime, VOLK will select the
    correct proto-kernel. In this way, the users of VOLK call a kernel for
    performing the operation that is platform/architecture agnostic. This
    allows us to write portable SIMD code that is optimized for a variety of
    platforms.

  doc_url: http://libvolk.org/doxygen/index.html
  dev_url: https://github.com/gnuradio/volk

extra:
  recipe-maintainers:
    - ryanvolz
