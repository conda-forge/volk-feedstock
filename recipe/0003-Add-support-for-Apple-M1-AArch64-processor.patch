From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <ryan.volz@gmail.com>
Date: Thu, 6 May 2021 17:35:47 -0400
Subject: [PATCH] Add support for Apple M1 AArch64 processor.

---
 cpu_features/CMakeLists.txt                |  2 +-
 cpu_features/include/cpu_features_macros.h |  4 +++
 cpu_features/src/cpuinfo_aarch64.c         | 48 +++++++++++++++++++++++++++++++++++
 3 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/cpu_features/CMakeLists.txt b/cpu_features/CMakeLists.txt
index 2b355a0..d33529f 100644
--- a/cpu_features/CMakeLists.txt
+++ b/cpu_features/CMakeLists.txt
@@ -146,7 +146,7 @@ set_property(TARGET cpu_features PROPERTY POSITION_INDEPENDENT_CODE ${BUILD_PIC}
 target_include_directories(cpu_features
   PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/cpu_features>
 )
-if(PROCESSOR_IS_X86)
+if(PROCESSOR_IS_X86 OR PROCESSOR_IS_AARCH64)
   if(APPLE)
     target_compile_definitions(cpu_features PRIVATE HAVE_SYSCTLBYNAME)
   endif()
diff --git a/cpu_features/include/cpu_features_macros.h b/cpu_features/include/cpu_features_macros.h
index 4b231a1..6be98db 100644
--- a/cpu_features/include/cpu_features_macros.h
+++ b/cpu_features/include/cpu_features_macros.h
@@ -39,6 +39,10 @@
 #define CPU_FEATURES_ARCH_ARM
 #endif

+#if (defined(__APPLE__) && defined(__arm64__))
+#define CPU_FEATURES_ARCH_AARCH64
+#endif
+
 #if defined(__aarch64__)
 #define CPU_FEATURES_ARCH_AARCH64
 #endif
diff --git a/cpu_features/src/cpuinfo_aarch64.c b/cpu_features/src/cpuinfo_aarch64.c
index 0a52718..c71a809 100644
--- a/cpu_features/src/cpuinfo_aarch64.c
+++ b/cpu_features/src/cpuinfo_aarch64.c
@@ -22,6 +22,35 @@
 #include "internal/stack_line_reader.h"
 #include "internal/string_view.h"

+// The following includes are necessary to provide SSE detections on pre-AVX
+// microarchitectures.
+#if defined(CPU_FEATURES_OS_DARWIN)
+#if !defined(HAVE_SYSCTLBYNAME)
+#error "Darwin needs support for sysctlbyname"
+#endif
+#include <sys/sysctl.h>
+#endif  // CPU_FEATURES_OS
+
+#if defined(CPU_FEATURES_OS_DARWIN)
+#if defined(CPU_FEATURES_MOCK_CPUID_ARM64)
+extern bool GetDarwinSysCtlByName(const char*);
+extern int GetDarwinSysCtlByNameValue(const char*);
+#else  // CPU_FEATURES_MOCK_CPUID_ARM64
+static bool GetDarwinSysCtlByName(const char* name) {
+  int enabled;
+  size_t enabled_len = sizeof(enabled);
+  const int failure = sysctlbyname(name, &enabled, &enabled_len, NULL, 0);
+  return failure ? false : enabled;
+}
+static int GetDarwinSysCtlByNameValue(const char* name) {
+  int enabled;
+  size_t enabled_len = sizeof(enabled);
+  const int failure = sysctlbyname(name, &enabled, &enabled_len, NULL, 0);
+  return failure ? 0 : enabled;
+}
+#endif
+#endif  // CPU_FEATURES_OS_DARWIN
+
 // Generation of feature's getters/setters functions and kGetters, kSetters,
 // kCpuInfoFlags and kHardwareCapabilities global tables.
 #define DEFINE_TABLE_FEATURES                                                 \
@@ -124,6 +153,23 @@ Aarch64Info GetAarch64Info(void) {
   // /proc/cpuinfo).
   Aarch64Info info = kEmptyAarch64Info;

+#if defined(CPU_FEATURES_OS_DARWIN)
+  // Handling Darwin platform through sysctlbyname.
+  info.implementer = GetDarwinSysCtlByNameValue("hw.cputype");
+  info.variant = GetDarwinSysCtlByNameValue("hw.cpusubtype");
+  info.part = GetDarwinSysCtlByNameValue("hw.cpufamily");
+  info.revision = GetDarwinSysCtlByNameValue("hw.cpusubfamily");
+
+  info.features.fp = GetDarwinSysCtlByName("hw.optional.floatingpoint");
+  info.features.fphp = GetDarwinSysCtlByName("hw.optional.neon_hpfp");
+  info.features.sha512 = GetDarwinSysCtlByName("hw.optional.armv8_2_sha512");
+  info.features.atomics = GetDarwinSysCtlByName("hw.optional.armv8_1_atomics");
+  info.features.asimdfhm = GetDarwinSysCtlByName("hw.optional.armv8_2_fhm");
+  info.features.sha3 = GetDarwinSysCtlByName("hw.optional.armv8_2_sha3");
+  info.features.crc32 = GetDarwinSysCtlByName("hw.optional.armv8_crc32");
+
+#else
+
   FillProcCpuInfoData(&info);
   const HardwareCapabilities hwcaps = CpuFeatures_GetHardwareCapabilities();
   for (size_t i = 0; i < AARCH64_LAST_; ++i) {
@@ -132,6 +178,8 @@ Aarch64Info GetAarch64Info(void) {
     }
   }

+#endif
+
   return info;
 }

--
2.30.2

